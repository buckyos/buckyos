#!/bin/python3
import sys
import platform
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

appid = sys.argv[1]
username = sys.argv[2]

container_id = f"{username}-{appid}"

def is_container_running(container_name):
    # 当前默认windows上不支持docker，利用run file机制做一个假启动
    # TODO: 考虑在经过某些手工配置后，windows上也可以支持docker

    if platform.system() == "Windows":
        print(f"Windows is not supported for docker, fake check {container_id}")
        return os.path.exists(f"{current_dir}/{container_id}.win")
    

    try:
        # 获取指定名字的容器
        # 使用docker ps命令检查容器是否运行
        cmd = f"docker ps -q -f name={container_name}"
        output = os.popen(cmd).read().strip()
        if output:
            print(f"Container '{container_name}' is running.")
            return True
        else:
            # 检查容器是否存在但未运行
            cmd = f"docker ps -aq -f name={container_name}"
            output = os.popen(cmd).read().strip()
            if output:
                print(f"Container '{container_name}' exists but is not running.")
            else:
                print(f"Container '{container_name}' not found.")
            return False

    except Exception as e:
        print(f"Error checking container status: {e}")
        return False

def check_port() -> bool:
    return True
# TODO:判断容器是否运行应该增加 unknown 状态的返回值
if __name__ == "__main__":
    if is_container_running(container_id):
        if check_port():
            print(f"app {container_id} is running")
            exit(0)
    print(f"app {container_id} is not running")
    exit(1)

